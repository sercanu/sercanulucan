<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog-rss on Sercan Ulucan</title>
    <link>http://sercanulucan.com/blog/index.xml</link>
    <description>Recent content in Blog-rss on Sercan Ulucan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 17 Jan 2017 00:00:00 +0300</lastBuildDate>
    <atom:link href="http://sercanulucan.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Four Ways of fib(n) with Clojure</title>
      <link>http://sercanulucan.com/blog/2017/01/four-ways-of-fibn-with-clojure/</link>
      <pubDate>Tue, 17 Jan 2017 00:00:00 +0300</pubDate>
      
      <guid>http://sercanulucan.com/blog/2017/01/four-ways-of-fibn-with-clojure/</guid>
      <description>

&lt;p&gt;Calculation of nth &lt;a href=&#34;https://en.wikipedia.org/wiki/Fibonacci_number&#34; target=&#34;_blank&#34;&gt;Fibonacci number&lt;/a&gt; is one of the common example of introduction to programming. Here I wanted combine this example with some Clojure utilities in four ways.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Recursive with stack usage and &lt;code&gt;memoize&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Recursive with tail call&lt;/li&gt;
&lt;li&gt;With &lt;code&gt;reduce&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;Imperative way with &lt;code&gt;refs&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;fib(0) = 0&lt;br /&gt;
fib(1) = 1&lt;br /&gt;
fib(n) = fib(n-1) + fib(n-2)&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-recursive-with-stack-usage-and-memoize&#34;&gt;1. Recursive with stack usage and memoize&lt;/h3&gt;

&lt;p&gt;This example isn&amp;rsquo;t the ideal way but it&amp;rsquo;s important to understand how recursion works. Clojure has &lt;strong&gt;no tail recursion optimization by default&lt;/strong&gt;. This example causes stack overflow error.
&lt;code&gt;memoize&lt;/code&gt; is a useful function to speed up when we&amp;rsquo;re sure the result of the function is always same and there is no need to call once more for side effects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn fib [n]
  (if (&amp;gt; n 1)  ; if n=0 or n=1 return n
    (+ (fib (dec n)) (fib (- n 2)))
    n))

(time (fib 36))
;&amp;quot;Elapsed time: 3234.847424 msecs&amp;quot;
;= 14930352

(def fib-m
  (memoize
   (fn [n]
     (if (&amp;gt; n 1)
       (+ (fib-m (dec n)) (fib-m (- n 2)))
       n))))

(time (fib-m 36))
;&amp;quot;Elapsed time: 0.480431 msecs&amp;quot;
;= 14930352

(fib-m 10000)
;StackOverflowError   clojure.lang.Numbers.gt (Numbers.java:3864)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-recursive-with-tail-call&#34;&gt;2. Recursive with tail call&lt;/h3&gt;

&lt;p&gt;Clojure offers &lt;code&gt;recur&lt;/code&gt; for tail recursions. It calls the nearest loop or the function itself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn fib-recursive [n]
  (if (&amp;gt; n 1)      ; if n=0 or n=1 return n
    (loop [x 1 f0 0 f1 1]
      (if (&amp;lt; x n)  ; if it reaches to n, return f1
        (recur (inc x) f1 (+ f0 f1))
        f1))
    n))

(time (fib-recursive 36))
;&amp;quot;Elapsed time: 0.073619 msecs&amp;quot;
;= 14930352

(time (fib-recursive 100))
;ArithmeticException integer overflow  clojure.lang.Numbers.throwIntOverflow (Numbers.java:1501)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh we received an number overflow error. What is the problem? Clojure use &lt;code&gt;java.lang.Long&lt;/code&gt; as the default precision type and we reached the maximum possible value. There are two options in this condition:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using &lt;code&gt;clojure.lang.BigInt&lt;/code&gt; with &lt;code&gt;(bigint x)&lt;/code&gt; or adding N to end of the number &lt;code&gt;123N&lt;/code&gt;. This will be expensive if we usually stay in Long range.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;+&#39;&lt;/code&gt; operator. It automatically uses &lt;code&gt;clojure.lang.BigInt&lt;/code&gt; if necessary when the overflow occurs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Aritmetic operations have more best practices, it&amp;rsquo;ll be too much to try handling all of them here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(+ 1 Long/MAX_VALUE)
;ArithmeticException integer overflow  clojure.lang.Numbers.throwIntOverflow (Numbers.java:1501)

(type (+&#39; 1 Long/MAX_VALUE))
;clojure.lang.BigInt

(type (+ 1N Long/MAX_VALUE))
;clojure.lang.BigInt

(defn fib-recursive [n]
  (if (&amp;gt; n 1)      ; if n=0 or n=1 return n
    (loop [x 1 f0 0 f1 1]
      (if (&amp;lt; x n)  ; if it reaches to n, return f1
        (recur (inc x) f1 (+&#39; f0 f1)) ; long to bingint if necessary
        f1))
    n))

(fib-recursive 100000) ; pretty fast and no overflows
;=2597....75N
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-with-reduce-function&#34;&gt;3. With &lt;code&gt;reduce&lt;/code&gt; function&lt;/h3&gt;

&lt;p&gt;We just need to accumulate the numbers with the previous one. We can do it with reduce.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn fib-reduce [n]
  (if (&amp;gt; n 1) ; if n=0 or n=1 return n
    (first (reduce (fn [coll _]
                     [(+&#39; (first coll) (second coll)) ; save total and the previous
                      (first coll)])                  ; in a vector
                   [1 0] ; initial values
                   (range 1 n)))
    n))

(fib-reduce 100000)
;=2597....75N
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-imperative-way-with-refs&#34;&gt;4. Imperative way with &lt;code&gt;refs&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Probably this is not the best code as an example but it gives an idea.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn fib-imperative [n]
  (let [x (atom n)
        fib0 (ref 0)
        fib1 (ref 1)
        fibt (ref 1)]
    (while (&amp;gt; @x 1)
      (do (dosync (ref-set fibt @fib1)
                  (alter fib1 #(+&#39; % @fib0))
                  (ref-set fib0 @fibt))
          (swap! x dec)))
    @fib1))

(fib-imperative 100000)
;=2597....75N
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A mini benchmark of these functions. &lt;code&gt;fib-imperative&lt;/code&gt; looks really slow.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defn function-time [f x]
  (let [starttime (System/nanoTime)]
    (f x)
    (/ (- (System/nanoTime) starttime) 1e9)))

(map (fn [f]
       (reduce + (for [x (range 30)]
                   (function-time f 100000))))
     [fib-recursive fib-reduce fib-swap])
;(10.650267569 11.351116001000001 39.083980229000005)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In conclusion, fib-recursive seems the most nature and the fastest in four. Of course there are more ways like Binet Formula to calculate Fibonacci numbers, but here the goals was practicing Clojure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacs, One More Time</title>
      <link>http://sercanulucan.com/blog/2017/01/emacs-one-more-time/</link>
      <pubDate>Mon, 16 Jan 2017 00:00:00 +0300</pubDate>
      
      <guid>http://sercanulucan.com/blog/2017/01/emacs-one-more-time/</guid>
      <description>

&lt;p&gt;Last year, I decided to use Emacs for Clojure development. It is the most common, mature and the richest development environment for this task. After downloading and installation, I got a clean setup.&lt;/p&gt;

&lt;p&gt;I read documents, followed the tutorials. I started to understand the terminology and the shortcuts. Window, frame, buffer, modes&amp;hellip; Nothing was working according to my intuitions, but I didn&amp;rsquo;t step back and kept practicing on.&lt;/p&gt;

&lt;p&gt;I watched videos, read the guide at &lt;a href=&#34;http://www.braveclojure.com/basic-emacs/&#34; target=&#34;_blank&#34;&gt;braveclojure.com&lt;/a&gt;, read more documents and started customizations. However, things were not easy, configuration was hard. I was obsessed to build the dream environment for Clojure development, but I was fighting against the editor. Anyway, I believe the motto &lt;strong&gt;&amp;ldquo;No pain, No gain&amp;rdquo;&lt;/strong&gt; in heart.&lt;/p&gt;

&lt;h3 id=&#34;oh-distributions&#34;&gt;Oh, Distributions!&lt;/h3&gt;

&lt;p&gt;While I was reading about the configurations, I saw references to some distributions. &lt;a href=&#34;http://spacemacs.org/&#34; target=&#34;_blank&#34;&gt;Spacemacs&lt;/a&gt; and &lt;a href=&#34;http://batsov.com/prelude/&#34; target=&#34;_blank&#34;&gt;Prelude&lt;/a&gt; were the ready made configurations that I was trying do. Please have a look at them if you&amp;rsquo;re new to Emacs. I &lt;strong&gt;choose Spacemacs&lt;/strong&gt;, it was more popular and it looked really cool.&lt;/p&gt;

&lt;p&gt;After reading Spacemacs documentation, I began to customize it. It wasn&amp;rsquo;t hard but you need to be ready for surprises. For example, if you wan&amp;rsquo;t to change the font-size, you just edit the configuration file and reload it. (with a key combination) Oops&amp;hellip; nothing happened. Why? Because the default font &lt;strong&gt;isn&amp;rsquo;t supported&lt;/strong&gt; at 16px. I&amp;rsquo;m using a Mac and I didn&amp;rsquo;t expect this. Anyway, I changed the font to Menlo and it worked.&lt;/p&gt;

&lt;p&gt;I was very serious to grasp the best practices. Every documentation or tutorial was referencing to &lt;a href=&#34;http://orgmode.org/&#34; target=&#34;_blank&#34;&gt;Org mode&lt;/a&gt;. It seemed worthy to learn, I read a lot, I really tried to use it while taking notes, planning or even generating a static website, but I didn&amp;rsquo;t like it. Maybe it was &lt;strong&gt;my fault&lt;/strong&gt; to get busy with irrelevant things. I should have focused to &lt;a href=&#34;https://github.com/clojure-emacs/cider&#34; target=&#34;_blank&#34;&gt;Cider&lt;/a&gt; and Clojure things.&lt;/p&gt;

&lt;h3 id=&#34;yes-pain-no-gain&#34;&gt;Yes Pain, No Gain&lt;/h3&gt;

&lt;p&gt;Keybindings were nightmare. I could never configured them in a right way. I couldn&amp;rsquo;t use slurp and barf shortcuts of &lt;a href=&#34;http://danmidwood.com/content/2014/11/21/animated-paredit.html&#34; target=&#34;_blank&#34;&gt;Paredit&lt;/a&gt;. Maybe this wasn&amp;rsquo;t so important, but I was obsessed.&lt;/p&gt;

&lt;p&gt;Switching between windows wasn&amp;rsquo;t easy. I lost the REPL window many times. Any wrong command was ruining current setup heavily. I couldn&amp;rsquo;t figure out how to take back my faulty commands. I was hiding something forever or falling in a hopeless situation.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m very used to see the project folder at the left side of the window. So, I searched for a package and found &lt;a href=&#34;https://github.com/jaypei/emacs-neotree&#34; target=&#34;_blank&#34;&gt;NeoTree&lt;/a&gt;. After many attempts of getting used to shortcuts, I was happy to see my files at the left sidebar, until opening a new project. NeoTree was working only for one frame, it was a &lt;strong&gt;single instance&lt;/strong&gt;. It wasn&amp;rsquo;t possible to work at more than one project at the same time.&lt;/p&gt;

&lt;p&gt;All these experiments took several evenings and several weekends. I wasn&amp;rsquo;t learning Clojure, I was struggling with Emacs all the time, and I stopped.&lt;/p&gt;

&lt;h3 id=&#34;one-more-time&#34;&gt;One More Time&lt;/h3&gt;

&lt;p&gt;Today, I decided to try one more time. This time I&amp;rsquo;m experienced and I&amp;rsquo;m focused to write a single Clojure function. I installed the latest version of Emacs, renamed my .emacs.d folder and .spacemacs file. I started from scratch to build a new setup. I cloned the Spacemacs repo, add Clojure to modes and barely open a Clojure project. I started editing the file and wrote my first &lt;code&gt;defn&lt;/code&gt; Oops&amp;hellip;, &lt;strong&gt;I couldn&amp;rsquo;t type square brackets&lt;/strong&gt; with the usual key combination Alt+8. I received &amp;ldquo;No window numbered 8&amp;rdquo;. I need to resolve this issue before starting to code. Huh&amp;hellip; very disappointing.&lt;/p&gt;

&lt;p&gt;Okay, many people are comfortable at using Emacs. This means &lt;strong&gt;it&amp;rsquo;s my problem&lt;/strong&gt; but I really don&amp;rsquo;t know what is the wrong with me :) I don&amp;rsquo;t get how it works for others.&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&#34;https://github.com/jasongilman/proto-repl&#34; target=&#34;_blank&#34;&gt;Proto REPL&lt;/a&gt; now. It has some problems but it&amp;rsquo;s easy. Also Cursive is an option too, but I think it should be simplified and work as an independent IDE.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vocabulary Improvement Never Ends</title>
      <link>http://sercanulucan.com/blog/2017/01/vocabulary-improvement-never-ends/</link>
      <pubDate>Sun, 15 Jan 2017 00:00:00 +0300</pubDate>
      
      <guid>http://sercanulucan.com/blog/2017/01/vocabulary-improvement-never-ends/</guid>
      <description>&lt;p&gt;A rich vocabulary always helps a lot while expressing ourselves. However, we easily forget the new words we learned, or we cannot remember them when we&amp;rsquo;re speaking.
Even the native speakers don&amp;rsquo;t know all the words in their language. It&amp;rsquo;s possible live with 3000 words but when you need to be concise, you need advanced words in your pocket.&lt;/p&gt;

&lt;p&gt;So, how non-native speakers learn new words? How native ones remember the advanced words?&lt;/p&gt;

&lt;p&gt;Our brain has short-term and long-term memories. We need to practice in time periods to save a new information into our long-term memory. But how frequent? Which words? Some words are easy some of them not. What should we do?&lt;/p&gt;

&lt;p&gt;There are tones of websites and applications serve well for vocabulary improvement. For example;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At Ororo.tv, you can watch movies with subtitles and save the words while watching it. Very useful, but you need to pay and your words are stored there.&lt;/li&gt;
&lt;li&gt;At Vocabulary.com, you can create your own lists and study new words. This is also not free.&lt;/li&gt;
&lt;li&gt;At Cambridge.org, dictionary is perfect but creating word lists are not useful.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can an give many more examples. Some of them are really good but not free, some of them are not customizable enough. Which is the best? This is a subjective question and my answer is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://apps.ankiweb.net/&#34; target=&#34;_blank&#34;&gt;Anki&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Synchronizes at all devices, desktop, mobile phones, web etc.&lt;/li&gt;
&lt;li&gt;Free and open source&lt;/li&gt;
&lt;li&gt;Extremely customizable&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s possible to add images or sounds.&lt;/li&gt;
&lt;li&gt;Uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Spaced_repetition&#34; target=&#34;_blank&#34;&gt;Spaced Repetition&lt;/a&gt; method which is very effective.&lt;/li&gt;
&lt;li&gt;You can use it for any purpose, not only for languages.&lt;/li&gt;
&lt;li&gt;Sharing and importing word lists&lt;/li&gt;
&lt;li&gt;LaTeX support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yeah, it&amp;rsquo;s pretty nice. Just add your words and study when you have time.&lt;/p&gt;

&lt;p&gt;Here is my template with several definitions, synonyms, translation fields image and sound. You can find it &lt;a href=&#34;https://ankiweb.net/shared/info/1311421369&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. Just download to your mobile phone or computer and open it with Anki.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sercanulucan.com/images/20170115_anki.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you need pronunciations in mp3 format. &lt;a href=&#34;http://soundoftext.com/&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt; is useful.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dictionary.cambridge.org/&#34; target=&#34;_blank&#34;&gt;Cambridge dictionary&lt;/a&gt; is very good.&lt;/li&gt;
&lt;li&gt;For sentence examples, check &lt;a href=&#34;http://sentence.yourdictionary.com/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create your own decks and study. That&amp;rsquo;s all.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Marmaris</title>
      <link>http://sercanulucan.com/blog/2016/11/marmaris/</link>
      <pubDate>Wed, 16 Nov 2016 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/blog/2016/11/marmaris/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://sercanulucan.com/images/20161116_marmaris.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;em&gt;16 November 2016, Marmaris&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Last updated: 16.11.2016, will be updated later&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Today, I&amp;rsquo;d like to write about Marmaris, probably one of the most beautiful place in the world. Okay, you might think that I&amp;rsquo;m exaggerating. I&amp;rsquo;m sure there are lots of beautiful places in the world, however, how can I be neutral if the subject is the place where I grew up? 😄&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t want to bother you with long paragraphs. These are the things make Marmaris special.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Surrounded with &lt;a href=&#34;https://en.wikipedia.org/wiki/Pinus_brutia&#34; target=&#34;_blank&#34;&gt;Turkish pines&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Perfect bay for sailors. No waves, always calm.&lt;/li&gt;
&lt;li&gt;No factories or anything pollutes environment around.&lt;/li&gt;
&lt;li&gt;Almost every where is protected area. (I hope the statue doesn&amp;rsquo;t change 😨)&lt;/li&gt;
&lt;li&gt;Mandarin, orange, lemon, pomegranate, olive, Indian fig&lt;/li&gt;
&lt;li&gt;Mediterranean cuisine + Turkish cuisine&lt;/li&gt;
&lt;li&gt;Honestly, some tradespeople are annoying. 😠&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a map of bays and beaches. It&amp;rsquo;s totally draft. I&amp;rsquo;ll try to write a comprehensive description for each of them. This will be a subject for an other post.&lt;/p&gt;

&lt;iframe src=&#34;https://www.google.com/maps/d/u/0/embed?mid=1kSREB3pDOZZe1pC7KN0ZhsBmcDE&#34; width=&#34;800&#34; height=&#34;450&#34; frameborder=&#34;0&#34; style=&#34;border:0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Clojure Scalar Literals</title>
      <link>http://sercanulucan.com/blog/2016/11/clojure-scalar-literals/</link>
      <pubDate>Tue, 15 Nov 2016 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/blog/2016/11/clojure-scalar-literals/</guid>
      <description>

&lt;h3 id=&#34;scalar-literals&#34;&gt;Scalar Literals&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;;This is the content printed to standart out.&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;;=&amp;gt; This is what the function returns&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sercanulucan.com/blog/2016/11/clojure-scalar-literals#string&#34;&gt;String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sercanulucan.com/blog/2016/11/clojure-scalar-literals#character&#34;&gt;Character&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sercanulucan.com/blog/2016/11/clojure-scalar-literals#boolean&#34;&gt;Boolean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sercanulucan.com/blog/2016/11/clojure-scalar-literals#nil&#34;&gt;nil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sercanulucan.com/blog/2016/11/clojure-scalar-literals#keyword&#34;&gt;Keyword&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sercanulucan.com/blog/2016/11/clojure-scalar-literals#symbol&#34;&gt;Symbol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sercanulucan.com/blog/2016/11/clojure-scalar-literals#numbers&#34;&gt;Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sercanulucan.com/blog/2016/11/clojure-scalar-literals#regular-expression&#34;&gt;Regular Expression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;string&#34;&gt;String&lt;/h4&gt;

&lt;p&gt;Strings are Java Strings, instance of &lt;code&gt;java.lang.String&lt;/code&gt; and represented with double quotes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;&amp;quot;Hello Clojure&amp;quot;
;=&amp;gt; &amp;quot;Hello Clojure&amp;quot;

&amp;quot;Hello
new line&amp;quot;
;=&amp;gt; &amp;quot;Hello \nnew line&amp;quot;

(println &amp;quot;Life is simple&amp;quot;)
;Life is simple
;=&amp;gt; nil

(println &amp;quot;hello with newline,
prints with newline&amp;quot;)
;hello with newline,
;prints with newline
;=&amp;gt; nil

(println &amp;quot;or you can print with \n newline&amp;quot;)
;or you can print with
; newline
;=&amp;gt; nil

(class &amp;quot;I&#39;m String&amp;quot;)
;=&amp;gt; java.lang.String
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;character&#34;&gt;Character&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;\s
;=&amp;gt; \s

\u0053
;=&amp;gt; \S - Unicode

\o123
;=&amp;gt; \S - Octal

(class \s)
;=&amp;gt; java.lang.Character

;special chars
\space
;=&amp;gt; \space
(print \newline)
;
;=&amp;gt; nil
(println \return)
;
;=&amp;gt; nil
\backspace
;=&amp;gt; \backspace
\tab
;=&amp;gt; \tab
\formfeed
;=&amp;gt; \formfeed
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;boolean&#34;&gt;Boolean&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(class true)
;=&amp;gt; java.lang.Boolean

false
;=&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;nil&#34;&gt;nil&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(class nil)
;=&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;keyword&#34;&gt;Keyword&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;:apple
;=&amp;gt; :apple
(class :peanut)
;=&amp;gt; clojure.lang.Keyword
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;symbol&#34;&gt;Symbol&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(def meaning-of-life 42)
;=&amp;gt; #&#39;sandbox.core/meaning-of-life
meaning-of-life
;=&amp;gt; 42
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;numbers&#34;&gt;Numbers&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(class 42)
;=&amp;gt; java.lang.Long
(class 3.14)
;=&amp;gt; java.lang.Double
(class 42N)
;=&amp;gt; clojure.lang.BigInt
(class 0.01M)
;=&amp;gt; java.math.BigDecimal
(class 22/7)
;=&amp;gt; clojure.lang.Ratio
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;regular-expression&#34;&gt;Regular Expression&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(class #&amp;quot;(m|t)ail&amp;quot;)
;=&amp;gt; java.util.regex.Pattern
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Postcrossing</title>
      <link>http://sercanulucan.com/blog/2016/11/postcrossing/</link>
      <pubDate>Mon, 14 Nov 2016 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/blog/2016/11/postcrossing/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://sercanulucan.com/images/20161114_postcrossing.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;em&gt;Nipponia Nippons, &lt;a href=&#34;https://en.wikipedia.org/wiki/Crested_ibis&#34; target=&#34;_blank&#34;&gt;Japanese Crested ibis&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-is-postcrossing&#34;&gt;What is Postcrossing?&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s a website that enables sending postcards to random people and receive from as well. Here, I would like to share my experiences about &lt;a href=&#34;https://www.postcrossing.com/&#34; target=&#34;_blank&#34;&gt;postcrossing&lt;/a&gt;. I hope you find it engaging.&lt;/p&gt;

&lt;h4 id=&#34;how-it-works&#34;&gt;How it works?&lt;/h4&gt;

&lt;p&gt;Sender confirms to send a postcard and takes an ID from the website. Every postcard has an unique ID and it should be written on the postcard by the sender. When the postcard arrives, the receiver submits the ID and the postcard gets registered. So, the sender gains right to receive a postcard from a random sender. Also it&amp;rsquo;s possible to swap postcards directly. If you think a member has cool postcards, you can ask for swapping. This time there is no need to have an ID or registering.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve sent and received 54 postcards until now. It was very exciting to check your postbox when you arrive home. Also, it&amp;rsquo;s very exciting to get the notification email with a warm thank you message from the receiver. These are enough reasons to be a member of the website, however, there are more reasons like below :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You master the world map better than anyone else.&lt;/li&gt;
&lt;li&gt;You have opportunity to make friends from all over the world.&lt;/li&gt;
&lt;li&gt;Community is very nice, they&amp;rsquo;re all kind people.&lt;/li&gt;
&lt;li&gt;Postcards are informative, you learn a lot.&lt;/li&gt;
&lt;li&gt;You dust off your handwriting skill.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s fun to receive something physically.&lt;/li&gt;
&lt;li&gt;Rare but some people sends an envelope with full of surprises :) Coasters, teabags, stickers&amp;hellip;&lt;/li&gt;
&lt;li&gt;You share nice ideas, kind wishes or interesting stories.&lt;/li&gt;
&lt;li&gt;Stamps are cool.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;m sure it&amp;rsquo;s possible to say more. The cost of this joy is about 1$ or 1€ post fee, plus the cost of the postcard. Don&amp;rsquo;t underestimate these costs :) You can find yourself investing a lot to this hobby :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wearing Grey</title>
      <link>http://sercanulucan.com/blog/2016/11/wearing-grey/</link>
      <pubDate>Sun, 13 Nov 2016 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/blog/2016/11/wearing-grey/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://sercanulucan.com/images/20161113_life_is_simple.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Why wearing is so complicated?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you are meeting with your friends, you shouldn&amp;rsquo;t wear the same clothes with the previous meeting.&lt;/li&gt;
&lt;li&gt;You should be stylish at the office.&lt;/li&gt;
&lt;li&gt;You need to be elegant if you&amp;rsquo;re dating.&lt;/li&gt;
&lt;li&gt;You need to be interesting or cool when you&amp;rsquo;re going for a party.&lt;/li&gt;
&lt;li&gt;Interviews are so special, take care of your clothes.&lt;/li&gt;
&lt;li&gt;Funerals, ceremonies, conventions&amp;hellip; they all need different kind of suits.&lt;/li&gt;
&lt;li&gt;You have to wear the right shoes and the belt each time.&lt;/li&gt;
&lt;li&gt;Your wear&amp;rsquo;s brand is your business card.&lt;/li&gt;
&lt;li&gt;You need to update your wardrobe if you lose or gain weight.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;m really tired of picking the right suit for every meeting or event. I don&amp;rsquo;t want to be assessed with my clothes. I &lt;strong&gt;hate brands&lt;/strong&gt;, they don&amp;rsquo;t make sense. I just want to wear something healthy and quality. It&amp;rsquo;s okay to pay a lot for good shoes, but of course I don&amp;rsquo;t want to pay over the odds in any case.&lt;/p&gt;

&lt;p&gt;Here is my solution,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I realized that grey t-shirts are long-lasting, especially the &lt;strong&gt;light grey&lt;/strong&gt; ones. They don&amp;rsquo;t become discoloured. Also they look nice, you can wear them in any case.&lt;/li&gt;
&lt;li&gt;Grey sports shoes are my favourite. It&amp;rsquo;s possible wear them with any jeans etc.&lt;/li&gt;
&lt;li&gt;Blue, khaki or dark jeans are comfortable and handy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s all I wear and I don&amp;rsquo;t want to think anymore about dressing up. I didn&amp;rsquo;t influenced by Mark Zuckerberg, Cem Yılmaz or somebody else. I reached the conclusion after having piles of clothes. I want to live simple and keep myself away from the instructions of the society :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I Promise To Keep My Promises</title>
      <link>http://sercanulucan.com/blog/2016/11/i-promise-to-keep-my-promises/</link>
      <pubDate>Sat, 12 Nov 2016 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/blog/2016/11/i-promise-to-keep-my-promises/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://sercanulucan.com/images/20161112_keep_promises.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t have any goals, you won&amp;rsquo;t reach to anywhere. It doesn&amp;rsquo;t have to be so serious, losing weight, keeping your body in shape etc. are very common goals today. We promise to ourselves to achieve our goals, however, we usually don&amp;rsquo;t stick to our words. We begin diet on every Monday, postpone the workouts on Wednesday and the life goes on :) Why? I think it&amp;rsquo;s hard to develop habits and the easiest person to deceive is one’s self. We assume that we&amp;rsquo;ll have enough time next week, we assume that we&amp;rsquo;ll keep our promises next time, but we again fail.&lt;/p&gt;

&lt;p&gt;I think everybody should find their own ways, but I would like to give some tips to overcome this problem.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make it fun. It&amp;rsquo;s hard to keep doing something that you don&amp;rsquo;t like.&lt;/li&gt;
&lt;li&gt;If you can&amp;rsquo;t make it fun, strongly dream the prize you&amp;rsquo;ll get. You should deeply believe in what you&amp;rsquo;re doing.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t set high goals. Start with small steps. Our brains easily give up if something seems difficult.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t set too much goals. Don&amp;rsquo;t set a new one until the current ones become habits.&lt;/li&gt;
&lt;li&gt;Write down your process. Take notes and share them with your friends. This will bring some peer pressure and also you&amp;rsquo;ll have a success story to tell.&lt;/li&gt;
&lt;li&gt;Set measurable goals. Like &amp;ldquo;I&amp;rsquo;ll lose 5 kgs in 3 months.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are my goals, they may seem very familiar to you :) I&amp;rsquo;ll add more and update the &lt;a href=&#34;http://sercanulucan.com/misc/progress&#34;&gt;page here&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read a book per week&lt;/li&gt;
&lt;li&gt;Run at least 5K every sunday morning&lt;/li&gt;
&lt;li&gt;Complete 140 pomodoros each week. 1 pomodoro is 25 minutes work, 5 minutes rest&lt;/li&gt;
&lt;li&gt;Workout 3 times a week&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s all :) I&amp;rsquo;m &lt;strong&gt;sure&lt;/strong&gt; I&amp;rsquo;ll keep my promises :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Another Attempt at Blogging</title>
      <link>http://sercanulucan.com/blog/2016/11/another-attempt-at-blogging/</link>
      <pubDate>Fri, 11 Nov 2016 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/blog/2016/11/another-attempt-at-blogging/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://sercanulucan.com/images/20161111_blogging_attempt.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know how many times I attempted to write regularly, I hope this one becomes the last one :) I strongly wish to produce something every day and I want to write down what I&amp;rsquo;ve experienced. By the way, I can develop a habit and improve my writing skill which is an important one to express myself. English isn&amp;rsquo;t my native language and I sometimes struggle with making good sentences. I&amp;rsquo;d like overcome this issue and obtain an attractive writing skill, which is not an easy goal even for natives. So, writing regularly is the only way and I want to keep my promise to be successful.&lt;/p&gt;

&lt;h3 id=&#34;history-of-my-attempts&#34;&gt;History of My Attempts&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m still not sure if I have found the right way to organize my future writings. Huh looks stupid, but finding the best blogging way is similar to picking the right web framework for your project. I feel the same stress and look for the perfect solution which has never existed :) This reminds me the funny motto of &lt;a href=&#34;https://grails.org/&#34; target=&#34;_blank&#34;&gt;Grails&lt;/a&gt;, &lt;strong&gt;The search is over.&lt;/strong&gt; However, the search never ends and we still keep looking for a more beautiful template, better JS framework, faster and cheaper hosting etc. Obsessive? I think yes!&lt;/p&gt;

&lt;h3 id=&#34;the-first-attempt-geocities-2001&#34;&gt;The First Attempt, Geocities - 2001&lt;/h3&gt;

&lt;p&gt;I was at high school and this was the time when I met html tags. It was a good opportunity to host a free website, although 15 MB space was pretty limited :) Geocities will always remain in my memories where I experienced the power of internet. But I wasn&amp;rsquo;t aware of it :)&lt;/p&gt;

&lt;h3 id=&#34;frontpage-and-flash-2003&#34;&gt;Frontpage and Flash - 2003&lt;/h3&gt;

&lt;p&gt;After playing with html tags for a few years, I decided to build a website using Frontpage and Flash. It was the easiest way to create something attractive. However, my content was irrelevant and animated gifs were really terrible :) I didn&amp;rsquo;t continue to write and removed all the site from the FTP servers at my university :)&lt;/p&gt;

&lt;h3 id=&#34;blogger-2007&#34;&gt;Blogger - 2007&lt;/h3&gt;

&lt;p&gt;I always wanted to share the things I find useful or interesting. This is something like to show an interesting stone to your friends when you&amp;rsquo;re a child :) Blogger was getting popular and it took my attention until having a Facebook account. I ended my &amp;ldquo;serious&amp;rdquo; blogging attempt after starting to share posts on there :)&lt;/p&gt;

&lt;h3 id=&#34;wordpress-hosting-2010&#34;&gt;Wordpress Hosting - 2010&lt;/h3&gt;

&lt;p&gt;Wordpress was very popular, Blogger was its rival. Also there were other PHP frameworks too, but Wordpress was the most promising one. Search engines love Wordpress, there were tones of plug-ins and themes. It was very customizable. So, I decided to buy a hosting for my blog. The firm claimed that they&amp;rsquo;re doing a great job, but after enabling the most popular plug-ins, I understand that they&amp;rsquo;re totally a mess. I ended up struggling with the file permissions, database problems and many more issues. At the end, I started to upload my html files to their FTP servers, stopped using Wordpress and this was a very good reason to end my blogging attempt :)&lt;/p&gt;

&lt;h3 id=&#34;wordpress-on-heroku-2013&#34;&gt;Wordpress on Heroku - 2013&lt;/h3&gt;

&lt;p&gt;This time I was sure that I found a totally free, tested, solid solution for blogging. There were static site generators too, like Jekyll and Pelican, but Wordpress was still more charming for me. I initialized three different blogs in different languages, English, Turkish and Spanish. I posted &lt;a href=&#34;http://sercanulucan.com/archive/setting-up-wordpress/&#34;&gt;how to build a website&lt;/a&gt; and &lt;a href=&#34;http://sercanulucan.com/archive/keeping-heroku-dynos-alive/&#34;&gt;trigger the Heroku dynos&lt;/a&gt; to keep them alive :) Otherwise, it was taking 6-7 seconds to wake up them at the first GET request. Everything was okay until it became a burden to write something to three blogs. Also I started working at new company and I didn&amp;rsquo;t have much free time. Anyway, you see how I am disciplined :)&lt;/p&gt;

&lt;h3 id=&#34;static-site-generators-and-gitbook-2015&#34;&gt;Static Site Generators and Gitbook - 2015&lt;/h3&gt;

&lt;p&gt;The Wordpress on Heroku has some limitations (10 MB Postgres limit) if you&amp;rsquo;d like to host it completely free. However, Github pages serve 1 GB content for free. Markdown is an easy way to write your posts. If your website doesn&amp;rsquo;t need any database, like most of the blogs, static site generators are great choice. You just render the html files and push them to Github repository. I thought Jekyll or Pelican will be too complex for my needs, and I was looking for Clojure projects. I ended up my search picking &lt;a href=&#34;http://cryogenweb.org/&#34; target=&#34;_blank&#34;&gt;Cryogen&lt;/a&gt; as my static site generator. It was okay, but than I came across with Gitbook. The idea of editing markdown files online was cool. It looked easier than a static site generator and I moved my site to Gitbook. After a few posts, I give up again. It was for writing books, not for blogs. It has some limitations like organizing the menu etc.&lt;/p&gt;

&lt;h3 id=&#34;final-one-hugo-2016&#34;&gt;Final one, Hugo - 2016&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s hard to compare static site generators from all aspects here. So, I&amp;rsquo;ll just tell the primary reasons. I picked Hugo because it doesn&amp;rsquo;t have dependencies, runs the website very fast and it&amp;rsquo;s possible to observe changes without saving the MD file and refreshing the page. It&amp;rsquo;s convention is easy to learn. Templates, shortcodes and many other features are useful. You don&amp;rsquo;t easily get stucked. I hope it&amp;rsquo;ll be my last toy :)&lt;/p&gt;

&lt;h3 id=&#34;next&#34;&gt;Next?&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m thinking about to share my posts at Medium. Of course if I write something worth to share :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>