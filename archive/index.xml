<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Archive-rss on Sercan Ulucan</title>
    <link>http://sercanulucan.com/archive/index.xml</link>
    <description>Recent content in Archive-rss on Sercan Ulucan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 02 Jan 2016 11:24:04 +0300</lastBuildDate>
    <atom:link href="http://sercanulucan.com/archive/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>RMK Museum</title>
      <link>http://sercanulucan.com/archive/RMK-Museum/</link>
      <pubDate>Sat, 02 Jan 2016 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/archive/RMK-Museum/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://sercanulucan.com/images/archive/20160102_rmk.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;One of the greatest museum to visit in Istanbul is &lt;a href=&#34;http://www.rmk-museum.org.tr/en/index.htm&#34; target=&#34;_blank&#34;&gt;RMK Museum&lt;/a&gt;.
There are many unique and well prepared items and collections from different places of the world.
The main categories are Mustafa Kemal Atatürk, road transport with wonderful cars, rail transport with real locomotives,
navigation with a submarine, aviation with both military and civil planes, machinery, communication, scientific devices, models and toys, and the exhibitions was about Dolls Houses. It would take more than one day to observe every item in detail. The cafes in the museum were pretty good and cheap, thus, it&amp;rsquo;s possible to have a rest during the exhausting day. &lt;a href=&#34;https://www.flickr.com/photos/134530188@N05/sets/72157660751378324&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt; is an album of the pieces from my camera.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zero Art Movement</title>
      <link>http://sercanulucan.com/archive/Zero-Art-Movement/</link>
      <pubDate>Sun, 27 Dec 2015 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/archive/Zero-Art-Movement/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://sercanulucan.com/images/archive/20151227_zero.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s an interesting coincidence that my first post is about &lt;a href=&#34;https://en.wikipedia.org/wiki/Zero_(art)&#34; target=&#34;_blank&#34;&gt;Zero&lt;/a&gt;, the art movement raised after second world war to initialize a new beginning. Actually, I have similar feelings for my life and career with the idea of this art, thus, it was an fascinating activity to see the prominent pieces at &lt;a href=&#34;http://www.sakipsabancimuzesi.org/en&#34; target=&#34;_blank&#34;&gt;Sabancı Museum&lt;/a&gt;. In addition, it was interesting to see how artists used vibration, light, space, soot, nail, and other metarials to express their feelings. Although the movement is extremely modern, abstract, and too hard to understand, I enjoyed visiting the museum accompanied with a guide. &lt;a href=&#34;https://www.flickr.com/photos/134530188@N05/sets/72157662247203840/with/23380385513/&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt; is an album of the pieces from my camera.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Pragmatic Programmer Tips</title>
      <link>http://sercanulucan.com/archive/the-pragmatic-programmer/</link>
      <pubDate>Wed, 25 Nov 2015 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/archive/the-pragmatic-programmer/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Care About Your Craft&lt;/li&gt;
&lt;li&gt;Think! About Your Work&lt;/li&gt;
&lt;li&gt;Provide Options, Don&amp;rsquo;t Make Lame Excuses&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t Live with Broken Windows&lt;/li&gt;
&lt;li&gt;Be a Catalyst for Change&lt;/li&gt;
&lt;li&gt;Remember the Big Picture&lt;/li&gt;
&lt;li&gt;Make Quality a Requirements Issue&lt;/li&gt;
&lt;li&gt;Invest Regularly in Your Knowledge Portfolio&lt;/li&gt;
&lt;li&gt;Critically Analyze What You Read and Hear&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s Both What You Say and the Way You Say It&lt;/li&gt;
&lt;li&gt;DRY—Don&amp;rsquo;t Repeat Yourself&lt;/li&gt;
&lt;li&gt;Make It Easy to Reuse&lt;/li&gt;
&lt;li&gt;Eliminate Effects Between Unrelated Things&lt;/li&gt;
&lt;li&gt;There Are No Final Decisions&lt;/li&gt;
&lt;li&gt;Use Tracer Bullets to Find the Target&lt;/li&gt;
&lt;li&gt;Prototype to Learn&lt;/li&gt;
&lt;li&gt;Program Close to the Problem domain&lt;/li&gt;
&lt;li&gt;Estimate to Avoid Surprises&lt;/li&gt;
&lt;li&gt;Iterate the Schedule with the Code&lt;/li&gt;
&lt;li&gt;Keep Knowledge in Plain Text&lt;/li&gt;
&lt;li&gt;Use the Power of Command Shells&lt;/li&gt;
&lt;li&gt;Use a Single Editor Well&lt;/li&gt;
&lt;li&gt;Always Use Source Code Control&lt;/li&gt;
&lt;li&gt;Fix the Problem, Not the Blame&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t Panic&lt;/li&gt;
&lt;li&gt;&amp;ldquo;select&amp;rdquo; Isn&amp;rsquo;t Broken&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t Assume It—Prove It&lt;/li&gt;
&lt;li&gt;Learn a Text Manipulation Language&lt;/li&gt;
&lt;li&gt;Write Code That Writes Code&lt;/li&gt;
&lt;li&gt;You Can&amp;rsquo;t Write Perfect Software&lt;/li&gt;
&lt;li&gt;Design with Contracts&lt;/li&gt;
&lt;li&gt;Crash Early&lt;/li&gt;
&lt;li&gt;If It Can&amp;rsquo;t Happen, Use Assertions to Ensure That It Won&amp;rsquo;t&lt;/li&gt;
&lt;li&gt;Use Exceptions for Exceptional Problems&lt;/li&gt;
&lt;li&gt;Finish What You Start&lt;/li&gt;
&lt;li&gt;Configure, Don&amp;rsquo;t Integrate&lt;/li&gt;
&lt;li&gt;Put Abstractions in Code Details in Metadata&lt;/li&gt;
&lt;li&gt;Analyze Workflow to Improve Concurrency&lt;/li&gt;
&lt;li&gt;Design Using Services&lt;/li&gt;
&lt;li&gt;Always Design for Concurrency&lt;/li&gt;
&lt;li&gt;Separate Views from Models&lt;/li&gt;
&lt;li&gt;Use Blackboards to Coordinate Workflow&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t Program by Coincidence&lt;/li&gt;
&lt;li&gt;Estimate the Order of Your Algorithms&lt;/li&gt;
&lt;li&gt;Test Your Estimates&lt;/li&gt;
&lt;li&gt;Refactor Early, Refactor Often&lt;/li&gt;
&lt;li&gt;Design to Test&lt;/li&gt;
&lt;li&gt;Test Your Software, or Your Users Will&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t Use Wizard Code You Don&amp;rsquo;t Understand&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t Gather Requirements—Dig for Them&lt;/li&gt;
&lt;li&gt;Abstractions Live Longer than Details&lt;/li&gt;
&lt;li&gt;Use a Project Glossary&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t Think Outside the Box—Find the Box&lt;/li&gt;
&lt;li&gt;Listen to Nagging Doubts—Start When You&amp;rsquo;re Ready&lt;/li&gt;
&lt;li&gt;Some Things Are Better Done than Described&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t Be a Slave to Formal Methods&lt;/li&gt;
&lt;li&gt;Expensive Too Do Not Produce Better Designs&lt;/li&gt;
&lt;li&gt;Organize Around Functionality, Not Job Functions&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t Use Manual Procedures&lt;/li&gt;
&lt;li&gt;Test Early. Test Often. Test Automatically.&lt;/li&gt;
&lt;li&gt;Coding Ain&amp;rsquo;t Done &amp;lsquo;Til All the Tests Run&lt;/li&gt;
&lt;li&gt;Use Saboteurs to Test Your Testing&lt;/li&gt;
&lt;li&gt;Test State Coverage, Not Code Coverage&lt;/li&gt;
&lt;li&gt;Find Bugs Once&lt;/li&gt;
&lt;li&gt;Treat English as Just Another Programming Language&lt;/li&gt;
&lt;li&gt;Build Documentation In, Don&amp;rsquo;t Bolt It On&lt;/li&gt;
&lt;li&gt;Gently Exceed Your Users&amp;rsquo; Expectations&lt;/li&gt;
&lt;li&gt;Sign Your Work&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacs Shortcuts</title>
      <link>http://sercanulucan.com/archive/emacs-shortcuts/</link>
      <pubDate>Mon, 16 Nov 2015 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/archive/emacs-shortcuts/</guid>
      <description>&lt;p&gt;C-v page down&lt;br /&gt;
M-v page up&lt;/p&gt;

&lt;p&gt;C-u 8 C-v move 8 lines below&lt;br /&gt;
C-u 0 C-l move line to top of page&lt;/p&gt;

&lt;p&gt;M-&amp;gt; end of all text&lt;br /&gt;
M-&amp;lt; beginning of text&lt;/p&gt;

&lt;p&gt;C-l middle of the page&lt;br /&gt;
C-l C-l&lt;/p&gt;

&lt;p&gt;C-f forward character&lt;br /&gt;
C-b backward character&lt;/p&gt;

&lt;p&gt;C-n next line&lt;br /&gt;
C-p previous line&lt;/p&gt;

&lt;p&gt;M-f forward a word&lt;br /&gt;
M-b backward a word&lt;/p&gt;

&lt;p&gt;C-a beginning of a line&lt;br /&gt;
C-e end of a line&lt;/p&gt;

&lt;p&gt;M-a begining of a sentence&lt;br /&gt;
M-e end of a sentence&lt;/p&gt;

&lt;p&gt;C-g cancel command&lt;/p&gt;

&lt;p&gt;C-x C-l run disable command example&lt;/p&gt;

&lt;p&gt;C-x 1 kill other windows&lt;br /&gt;
C-x 2 divide window&lt;br /&gt;
C-x o switch to next window&lt;br /&gt;
C-M-v scroll other window&lt;br /&gt;
C-x 4 C-f open file in a new window&lt;br /&gt;
M-x make-frame opens new frame&lt;br /&gt;
M-x delete-frame deletes frame&lt;/p&gt;

&lt;p&gt;C-h k C-f opens documentation window&lt;/p&gt;

&lt;p&gt;C-u 8 * insert 8 *&lt;/p&gt;

&lt;p&gt;&amp;lt;DEL&amp;gt;    Delete the character just before the cursor&lt;br /&gt;
C-d          Delete the next character after the cursor&lt;/p&gt;

&lt;p&gt;M-&amp;lt;DEL&amp;gt;  Kill the word immediately before the cursor&lt;br /&gt;
M-d            Kill the next word after the cursor&lt;/p&gt;

&lt;p&gt;C-k              Kill from the cursor position to end of line&lt;br /&gt;
M-k             Kill to the end of the current sentence&lt;/p&gt;

&lt;p&gt;C-Space Start selection&lt;/p&gt;

&lt;p&gt;C-/, C-x u, C-_ Undo
C-g C-/ Redo&lt;/p&gt;

&lt;p&gt;C-w kill selection&lt;br /&gt;
C-k kill current line&lt;br /&gt;
M-w copy selection&lt;br /&gt;
C-y paste clipboard&lt;br /&gt;
M-y call previous clipboard buffer&lt;/p&gt;

&lt;p&gt;C-x C-f open file&lt;br /&gt;
C-x C-s save file&lt;/p&gt;

&lt;p&gt;C-x C-b list buffers&lt;/p&gt;

&lt;p&gt;C-x s save buffer&lt;/p&gt;

&lt;p&gt;M-x recover-file FILENAME&lt;/p&gt;

&lt;p&gt;M-x text-mode&lt;/p&gt;

&lt;p&gt;C-s search
C-r reverse search&lt;/p&gt;

&lt;p&gt;C-h c C-p  help of previous command&lt;br /&gt;
C-h f previous-line describe a function&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gitolite and Gitweb Installation </title>
      <link>http://sercanulucan.com/archive/gitolite/</link>
      <pubDate>Wed, 02 Oct 2013 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/archive/gitolite/</guid>
      <description>&lt;p&gt;One of the favorite git repository is gitolite and we can browse repository with gitweb.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/sercanu/6868868.js&#34;&gt;&lt;/script&gt;

&lt;script src=&#34;//gist.github.com/sercanu/6874474.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins Installation and Sample Python Project</title>
      <link>http://sercanulucan.com/archive/jenkins/</link>
      <pubDate>Tue, 01 Oct 2013 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/archive/jenkins/</guid>
      <description>&lt;script src=&#34;//gist.github.com/sercanu/6881596.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Setting up Workpress on Heroku</title>
      <link>http://sercanulucan.com/archive/setting-up-wordpress/</link>
      <pubDate>Wed, 25 Sep 2013 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/archive/setting-up-wordpress/</guid>
      <description>&lt;p&gt;We can host our wordpress application free on Heroku. Here is the few steps.
Heroku gives us:&lt;/p&gt;

&lt;p&gt;1 dyno
Postgresql DB (10.000 rows limited, we can switch to 10 mb MySql if needed.)
Custom domain setting is possible.
These are enough for hosting.&lt;/p&gt;

&lt;p&gt;Setup
There 2 popular templates. First one is simple, second one is a little complex but performs better.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mhoofman/wordpress-heroku&#34; target=&#34;_blank&#34;&gt;M. Hoofman’s wordpress-heroku template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mchung/heroku-buildpack-wordpress&#34; target=&#34;_blank&#34;&gt;M. Chung’s heroku-buildpack-wordpress template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we do not have performanse issues, we can choose first one.
At our OS git and &lt;a href=&#34;https://toolbelt.herokuapp.com/debian&#34; target=&#34;_blank&#34;&gt;heroku cli&lt;/a&gt; should be installed.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/sercanu/6473551.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Setting Static IP to Ubuntu 12.04</title>
      <link>http://sercanulucan.com/archive/setting-static/</link>
      <pubDate>Mon, 23 Sep 2013 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/archive/setting-static/</guid>
      <description>&lt;script src=&#34;//gist.github.com/sercanu/6898056.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Yazılım Geliştiriciler İçin Ubuntu Kurulumu (Turkish)</title>
      <link>http://sercanulucan.com/archive/kurulum/</link>
      <pubDate>Fri, 20 Sep 2013 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/archive/kurulum/</guid>
      <description>

&lt;p&gt;Uygulama geliştirmek için ihtiyaca göre ya da alışkanlıklara göre farklı ortamlar kullanmak mümkün. Bana en uygun gelen işletim sistemi Ubuntu oldu. Mac OS ile beraber geliştiriciler arasında en popüler olduğunu söylemek mümkün.&lt;/p&gt;

&lt;h3 id=&#34;sanal-makine-kurulumu&#34;&gt;Sanal Makine Kurulumu&lt;/h3&gt;

&lt;p&gt;En kolay yöntem sanal makine olarak kurmak. Bir kaç adımda Ubuntu çalışır hale geliyor.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ubuntu’yu 64-bit seçerek ISO olarak indirin.&lt;/li&gt;
&lt;li&gt;VMPlayer ya da VirtualBox kurun.&lt;/li&gt;
&lt;li&gt;Yeni sanal makine oluşturup, indirdiğiniz ISO’yu göstererek kurulum yapın. 20-30 GB disk, 2-3 GB ram yeterli olur. Kurulum sırasında saat dilimi, klavye düzeni, kullanıcı şifresi gibi birkaç bilgi dışında bilgi gerekmiyor.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Böylece her yere taşınabilen, gerekirse kolayca silinebilen bir işletim sistemine sahip olduk. Eğer bilgisayarınızın belleği müsaitse aynı anda birden çok sanal makineyle çalışmak mümkün. Deneme ya da demo amaçlı yapacağınız kurulumları yeni sanal makinede yapabilirsiniz.&lt;/p&gt;

&lt;p&gt;Aşağıdaki uygulamaları kurmaya ihtiyacınız olacaktır.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Ortam Değişkenleri&lt;/li&gt;
&lt;li&gt;Maven&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Mercurial&lt;/li&gt;
&lt;li&gt;Python Araçları&lt;/li&gt;
&lt;li&gt;Guake&lt;/li&gt;
&lt;li&gt;IDEA&lt;/li&gt;
&lt;li&gt;PyCharm&lt;/li&gt;
&lt;li&gt;Sublime Text&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;java-kurulumu&#34;&gt;Java Kurulumu&lt;/h3&gt;

&lt;p&gt;İstediğiniz Java sürümünü indirin. Aşağıdaki şekilde kurabilirsiniz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./jdk-6u45-linux-x64.bin
$ sudo mkdir /usr/lib/jvm
$ sudo mv jdk1.6.0_45 /usr/lib/jvm
$ sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.6.0_45/bin/javac 1
$ sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.6.0_45/bin/java 1
$ sudo update-alternatives --install /usr/bin/javaws javaws /usr/lib/jvm/jdk1.6.0_45/bin/javaws 1
$ sudo update-alternatives --config javac
$ sudo update-alternatives --config java
$ sudo update-alternatives --config javaws
$ java -version
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ortam-değişkenleri&#34;&gt;Ortam Değişkenleri&lt;/h3&gt;

&lt;p&gt;Ortam değişkenlerini bir dosya aracılığı ile belirmek faydalı olacaktır.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd ~
$ nano .bashrc
# ile .bashrc&#39;nin başına aşağıdakini yapıştıralım.

if [ -f ~/env_options ]; then
   . ~/env_options
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Örnek env_options dosyası&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;JAVA_HOME=/usr/lib/jvm/jdk1.6.0_45
M2_HOME=/home/user/devtool/maven3
MAVEN_OPTS=&amp;quot;-Xms256m -Xmx512m -XX:PermSize=256m -XX:MaxPermSize=256m&amp;quot;
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin:$M2_HOME/bin
export MAVEN_OPTS
export JAVA_HOME
export M2_HOME
export PATH
export WORKON_HOME=~/.envs
source /usr/local/bin/virtualenvwrapper.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;git-kurulumu&#34;&gt;Git Kurulumu&lt;/h3&gt;

&lt;p&gt;İndirdikten sonra aşağıdaki komutlarla kurabilirsiniz. $ sudo apt-get install git ile repository’den de kurulabilir.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tar -xzvf gitxxx.tar.gz
$ cd gitxxx
$ make prefix=/usr/local all
$ sudo make prefix=/usr/local install
$ which git
$ git --version
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;diğer-kurulumlar&#34;&gt;Diğer Kurulumlar&lt;/h3&gt;

&lt;p&gt;Maven, Sublime Text gibi uygulamalar binary olarak indirilip çalıştırılabilir.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Python araçları
$ sudo apt-get install python-pip python-dev build-essential
$ sudo apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev
$ sudo apt-get install python-virtualenv
$ sudo pip install virtualenvwrapper

# Ssh Server
$ sudo apt-get install openssh-server

$ sudo apt-get install mercurial
$ sudo apt-get install postgresql-9.1 libpq-dev
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Keeping Heroku Dynos Alive</title>
      <link>http://sercanulucan.com/archive/keeping-heroku-dynos-alive/</link>
      <pubDate>Sun, 15 Sep 2013 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/archive/keeping-heroku-dynos-alive/</guid>
      <description>&lt;p&gt;If our application on Heroku doesn’t called for a period of time, it switches to sleeping mode. It takes 7-8 seconds to wake up on first call. That effects visitors negative. Pinging applications periodically can be a solution.&lt;/p&gt;

&lt;p&gt;For pinging we can use Pingdom or New Relic services but it is possible to do this with a script running on Heroku.&lt;/p&gt;

&lt;p&gt;As shown below, we have 3 files and the commands are explained. Create the Heroku application and deploy it. That’s all.
This sample is taken from Heroku’s documents.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clock.py&lt;/li&gt;
&lt;li&gt;requirements.txt&lt;/li&gt;
&lt;li&gt;Procfile&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;//gist.github.com/sercanu/6475080.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Django Rest Framework Example Project</title>
      <link>http://sercanulucan.com/archive/djang-rest-example/</link>
      <pubDate>Sat, 14 Sep 2013 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/archive/djang-rest-example/</guid>
      <description>&lt;p&gt;There are 2 major python libraries which enables publishing Django models as REST APIs. &lt;a href=&#34;http://www.django-rest-framework.org/&#34; target=&#34;_blank&#34;&gt;Django Rest Framework&lt;/a&gt; and &lt;a href=&#34;http://tastypieapi.org/&#34; target=&#34;_blank&#34;&gt;Tastyepie&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Both are mature and supported. &lt;a href=&#34;https://github.com/sercanu/django-rest-favorites&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt; is a sample project with Django Rest Framework.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tigase, SleekXMPP, ConverseJS, Spark and Pidgin</title>
      <link>http://sercanulucan.com/archive/websocket/</link>
      <pubDate>Thu, 12 Sep 2013 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/archive/websocket/</guid>
      <description>

&lt;p&gt;I followed steps below to have a running XMPP server.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tigase XMPP server installation (check the gist below)&lt;/li&gt;
&lt;li&gt;Connecting with Spark and Pidgin&lt;/li&gt;
&lt;li&gt;SleekXMPP client example (check the gist below)&lt;/li&gt;
&lt;li&gt;ConverseJS example (check the gist below)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;tigase&#34;&gt;Tigase&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tigase.org/&#34; target=&#34;_blank&#34;&gt;Tigase&lt;/a&gt; is a GPL licenced XMPP server which is scalable and performs well. There is 2 more popular XMPP servers &lt;a href=&#34;https://www.ejabberd.im/&#34; target=&#34;_blank&#34;&gt;ejabberd&lt;/a&gt; and &lt;a href=&#34;http://www.igniterealtime.org/projects/openfire/index.jsp&#34; target=&#34;_blank&#34;&gt;Openfire&lt;/a&gt; which can be good choices. Openfire is Apache Licenced as well but it is for middle size projects.
I wanted to try Tigase, it seems well and easy to setup.&lt;/p&gt;

&lt;h3 id=&#34;spark-and-pidgin&#34;&gt;Spark and Pidgin&lt;/h3&gt;

&lt;p&gt;If you want to connect to XMPP server, you need a client. It is possible to use &lt;a href=&#34;http://www.igniterealtime.org/projects/spark/index.jsp&#34; target=&#34;_blank&#34;&gt;Spark&lt;/a&gt; for Windows and &lt;a href=&#34;http://www.pidgin.im/&#34; target=&#34;_blank&#34;&gt;Pidgin&lt;/a&gt; for Ubuntu. Also they have versions for popular operating systems.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Clients should be able to resolve XMPP server hostname. This can be done via adding the server to hosts file. Otherwise it is not possible to connect. Add to hosts file myhostname xmppserverip record.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;sleekxmpp&#34;&gt;SleekXMPP&lt;/h3&gt;

&lt;p&gt;This is XMPP client python library. There are some other libraries but this is the way to go. Check &lt;a href=&#34;http://sleekxmpp.com/&#34; target=&#34;_blank&#34;&gt;SleekXMPP.com&lt;/a&gt; and the gist below.&lt;/p&gt;

&lt;h3 id=&#34;conversejs&#34;&gt;ConverseJS&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://conversejs.org/&#34; target=&#34;_blank&#34;&gt;ConverseJS&lt;/a&gt; is XMPP Client for browsers. It is built on Strophe.js which is the most popular Bosh client. Check ConverseJS.org and the gist below.&lt;/p&gt;

&lt;h3 id=&#34;bosh-vs-websockets&#34;&gt;Bosh vs Websockets&lt;/h3&gt;

&lt;p&gt;Still there is no completed standart for websockets, XMPP servers started to support websockets. Tigase supports as well. But there is a few and early stage clients which supports websocket. There is &lt;a href=&#34;http://mrjoes.github.io/2012/10/11/sockjs-ejabberd.html&#34; target=&#34;_blank&#34;&gt;good post&lt;/a&gt; from Mr. Joes.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/sercanu/6959854.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Unicode, UTF-8 ve Python (Turkish)</title>
      <link>http://sercanulucan.com/archive/unicode-utf8/</link>
      <pubDate>Tue, 10 Sep 2013 11:24:04 +0300</pubDate>
      
      <guid>http://sercanulucan.com/archive/unicode-utf8/</guid>
      <description>

&lt;p&gt;Genelde kodlama(encoding) sorunuyla karşılaşıldığında akla gelen bir konu bu. Halbuki detayları öğrenildiğinde bitmeyen sinir bozucu hatalardan kurtulmak mümkün.&lt;/p&gt;

&lt;h3 id=&#34;neden-ihtiyaç-duyuyoruz&#34;&gt;Neden ihtiyaç duyuyoruz?&lt;/h3&gt;

&lt;p&gt;Bilgisayarlar için herşey bayttan meydana gelir. Dosyadaki bilgiler, ağdan geçen veriler hep bayt cinsinden saklanır. Baytlar onları geri çözümleyene kadar anlamsızdırlar. İlk bilgisayarlar ortaya çıktığında ASCII karakter seti belirlendi. Her karakter için 1 byte kullanmak yeterliydi. Bu şekilde en fazla 256 karakter elde etmek mümkündü. Her karakterin 1 sayı karşılığı olduğunu düşünürsek 2^8 = 256.&lt;/p&gt;

&lt;p&gt;Bu kadar az karakter çeşidi elbette tüm diller için yetersizdi. Hatta latin dilleri için bile yetersizdi. Zamanla farklı karakter setleri ortaya çıktı ama durumu daha karışık hale getirdi. Bu yüzden Unicode adında genel geçer ve tüm dilleri kapsayan bir karakteri seti ortaya çıktı. Doğal olarak 1 karakter 1 bayt ile ifade edilemiyor, 4 bayta kadar ifade edilen karakterler var.&lt;/p&gt;

&lt;h3 id=&#34;unicode-nedir&#34;&gt;Unicode Nedir?&lt;/h3&gt;

&lt;p&gt;Unicode şu an 110 bin karakteri içeren bir karakter setidir. Orhun Kitabeleri’nin yazıldığı eski Türkçe alfabesi bile mevcuttur.
U+00CA ya da \u00CA şeklinde u’dan sonra 16′lık sayı birimiyle gösterilirler.&lt;/p&gt;

&lt;p&gt;Türkçe karakterlerin Unicode karşılıkları şunlardır:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ğ – \u011f
Ğ – \u011e
ı – \u0131
İ – \u0130
ö – \u00f6
Ö – \u00d6
ü – \u00fc
Ü – \u00dc
ş – \u015f
Ş – \u015e
ç – \u00e7
Ç – \u00c7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Görüldüğü gibi ö, ü, ç 1 bayt ile ifade edilebiliyor. Bunun sebebi Unicode setinin ilk 128 karakteri ASCII ile, ilk 256 karakteri ISO-8859-9 (Latin-1) ile aynı tutulmuştur. Bu karakterler ISO-8859-9′da olduğu için sıraları daha öndedir. Bu yüzdendir ki bazı yazılarda ö, ü, ç harfleri düzgün çıkar ama diğer Türkçe karakterler bozuk çıkar.&lt;/p&gt;

&lt;h3 id=&#34;utf-8-nedir&#34;&gt;UTF-8 Nedir?&lt;/h3&gt;

&lt;p&gt;UTF-8 bir kodlama yöntemidir. UTF Unicode Transformation Format’ın kısaltılmış halidir. Veriler dosyaya yazılacağı ya da ağ üzerinden geçeceği zaman baytlara çevrilmek zorundadır. Bu çevrilme işlemine kodlama denir. Unicode karakterlerin kodlanmasında en yaygın kullanılan yöntem UTF-8′dir.
UTF-8 en Unicode karakter setini en verimli yani en az bayt kaplayacak kadar kodlamaya çalışır.&lt;/p&gt;

&lt;p&gt;Örneğin
U+015E Unicode karakteri olan Ş’nin UTF-8 karşılığı 0xc59e olarak gösterilir.&lt;/p&gt;

&lt;p&gt;Python 2.X’te Unicode
Python’da metinler 2 şekilde tutulur. Unicode ya da bayt serisi şeklinde. Unicode olduğunu belirtmek için metinin başına “u” koyulur. Bayt serisi olan verinin başına “b” konulabilir fakat opsiyoneldir.&lt;/p&gt;

&lt;p&gt;Örneğin&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;veri = &#39;Merhaba&#39;
print(type(veri))
&amp;lt;type &#39;str&#39;&amp;gt;

veri = u&#39;Merhaba&#39;
print(type(veri))
&amp;lt;type &#39;unicode&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Görüldüğü gibi Unicode ve Bayt serileri farklı tipte nesnelerdir.
Python’da eğer farklı bir değer verilmediyse, bayt serileri varsayılan olarak ASCII’ye çevrilmeye çalışır. Eğer ASCII’ye çevrilemiyorsa hata alınır.&lt;/p&gt;

&lt;p&gt;Örneğin&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;veri = &#39;Merhaba Dünya&#39;
print(veri)
File &amp;quot;/home/user/PycharmProjects/practice/practice2.py&amp;quot;, line 3
SyntaxError: Non-ASCII character &#39;\xc3&#39; in file /home/user/PycharmProjects/practice/practice2.py on line 3, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details

Unicode&#39;a çevirelim:

veri = u&#39;Merhaba Dünya&#39;
print(veri)
File &amp;quot;/home/user/PycharmProjects/practice/practice2.py&amp;quot;, line 3
SyntaxError: Non-ASCII character &#39;\xc3&#39; in file /home/user/PycharmProjects/practice/practice2.py on line 3, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yine hata aldık! Bunun sebebi ” arasına yazdığımız ifadenin ASCII’den Unicode’a çevrilmeye çalışılmasıdır. Bu yüzden ASCII karşılığı olmayan bir karakter çevrilemez.&lt;/p&gt;

&lt;p&gt;Doğrusu:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;veri = &#39;Merhaba D\u00fcnya&#39;
print(veri)
Merhaba D\u00fcnya

veri = u&#39;Merhaba D\u00fcnya&#39;
print(veri)
Merhaba Dünya
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aynı kodu dosyaya yazmak için kullanalım:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;veri = u&#39;Merhaba D\u00fcnya&#39;
f = open(&#39;/home/user/practice2.txt&#39;, &#39;w&#39;)
f.write(veri)
f.close()

Traceback (most recent call last):
  File &amp;quot;/home/user/PycharmProjects/practice/practice2.py&amp;quot;, line 8, in
    f.write(veri)
UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode character u&#39;\xfc&#39; in position 9: ordinal not in range(128)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yine ne oldu? Hani Unicode yapmıştık?
Eğer Python kullanılan terminalin kodlamasını tanıyabilirse sys.stdout.encoding parametresini bu kodlama değeri yapar. Büyük ihtimal terminalizin kodlaması UTF-8′di ve yukarıdaki kodlar bu yüzden çalıştı. Dosyaya yazarken herhangi bir kodlama belirtmediğimiz için ve sys.getdefaultencoding() ASCII olduğu için hata alındı.&lt;/p&gt;

&lt;p&gt;Girdilerde çözümleme(decoding), çıktılarda kodlama(encoding) yaparak sürekli Unicode değerlerle çalışmamız en iyisi olacaktır.&lt;/p&gt;

&lt;p&gt;Aşağıdaki kod hatasız çalışacaktır.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;veri = u&#39;Merhaba D\u00fcnya&#39;
veri = veri.encode(&#39;utf-8&#39;)
f = open(&#39;/home/user/practice2.txt&#39;, &#39;w&#39;)
f.write(veri)
f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kodlama değerlerinin okunması ve ayarlanması:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(sys.getdefaultencoding())
print(sys.stdout.encoding)
ascii
UTF-8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;kodlama bilgileri bu şekilde okunabilir.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os, sys
if sys.stdout.encoding == None:
    os.putenv(&amp;quot;PYTHONIOENCODING&amp;quot;,&#39;UTF-8&#39;)
    os.execv(sys.executable,[&#39;python&#39;]+sys.argv)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gerekirse PYTHONIOENCODING parametresi UTF-8 yapılabilir.
Unicode ve ASCII metin işlemleri:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;veri = &#39;Merhaba &#39; + u&#39;D\u00fcnya&#39;
print(type(veri))
&amp;lt;type &#39;unicode&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Python 2.X Unicode ile ASCII birleştirildiğinde bunu Unicode’a çevirir. (Python 3.X bu durumda hata verir.)&lt;/p&gt;

&lt;h3 id=&#34;python-3-x-te-unicode&#34;&gt;Python 3.X’te Unicode&lt;/h3&gt;

&lt;p&gt;Python 3.X’te str tipi zaten veriyi Unicode olarak saklar. Unicode’a çevirmek için “u” eklenmesi gerekmez. Aksine bayt olan verinin başına b”&amp;rdquo; eklemek gerekir.
Ayrıca sys.getdefaultencoding() değeri ASCII yerine UTF-8‘dir.
Python 3.X “Mer” + b”haba” gibi Unicode ve bayt değerin işleme sokulmasına izin vermez.&lt;/p&gt;

&lt;h3 id=&#34;öneriler&#34;&gt;Öneriler&lt;/h3&gt;

&lt;p&gt;Bir girdi söz konusu ise mutlaka çözümleme(decode) yapılarak Unicode’a çevrilmelidir.
Bir çıktı söz konusu ise mutlaka kodlama(encode) yapılarak UTF-8′e (ya da istediğinize) çevrilmelidir.
Kodda sadece Unicode değerler işleme sokulmalıdır.
Eldeki değerin tipine bakılarak gerekirse Unicode’a dönüştürülmelidir.
Uygulama farklı karakter setleriyle test edilmelidir.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>